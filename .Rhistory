source('~/data_product.R')
install.packages("dplyr")
library(dplyr)
library(caret)
library(rattle)
library(ggplot2)
library(rpart)
library(rpart.plot)
library(knitr)
names(Dat)
names(dat)
dat[,18] <-  ifelse(dat$CDC >= mean(dat$CDC),"Compressor_E", "Compressor_Non")
summary(dat)
head(dat)
source('~/data_product.R')
head(dat)
summary(dat)
dat$V19<- as.factor(dat$V19)
dat$V20<- as.factor(dat$V20)
summary(dat)
plot(dat$CDC)
plot(dat$TDC)
plot(dat$CDC)
plot(dat$lp)
summar(dat$lp)
summary(dat$lp)
dat<- select(dat, -TDC,-CDC, -lp )
summary(dat)
dat <- dat[, colSums(is.na(dat)) ==0]
summary(dat)
nzv <- nearZeroVar(dat[, -(16:17)], saveMetrics=TRUE)
dat <- dat[, nzv$nzv==FALSE]
corrM <- cor(dat[,-(14:15)])
high <- findCorrelation( corrM, cutoff =.95)
dat <- dat[, -high]
head(dat)
high
nzv
dat
set.seed(1000)
inTrain<- createDataPartition(dat$V19, p=0.7, list=FALSE)
training <-  dat[inTrain,]
testing  <-  dat[-inTrain,]
modFit_C<- train(V19~., method="rpart", data= dat)
modFit_C
modFit_C<- train(V19~., method="rpart", data= training)
modFit_C
source('~/data_product.R')
modFit_C
dat <-read.table("data.txt")
ttl<-lapply(featname,ext <- function(x) regmatches(x, gregexpr("(?<=\\().*?(?=\\))", x, perl=T)))
ttl1<-as.character(ttl$V1[1:16])
ttl1[18] <- "TDC"
ttl1[17] <- "CDC"
names(dat) <-ttl1
dat[,19] <-  ifelse(dat$CDC >= mean(dat$CDC),"Compressor_E", "Compressor_Non")
dat[,20] <-  ifelse(dat$TDC >= mean(dat$TDC),"Turbine_E", "Turbine_Non")
dat$V19<- as.factor(dat$V19)
dat$V20<- as.factor(dat$V20)
dat<- select(dat, -TDC,-CDC, -lp )
dat <- dat[, colSums(is.na(dat)) ==0]
nzv <- nearZeroVar(dat[, -(16:17)], saveMetrics=TRUE)
dat <- dat[, nzv$nzv==FALSE]
corrM <- cor(dat[,-(14:15)])
corrM
high <- findCorrelation( corrM, cutoff =.97)
high
dat <- dat[, -high]
head(dat)
high
sort(high)
featname
set.seed(1000)
inTrain<- createDataPartition(dat$V19, p=0.7, list=FALSE)
training <-  dat[inTrain,]
testing  <-  dat[-inTrain,]
modFit_C<- train(V19~., method="rpart", data= training)
modFit_C
print(modFit_C$finalModel)
predictions_C <- predict(modFit_C, newdata=testing)
confusionMatrix(predictions_C, testing$V19)
cart <- rpart(V19~., data=training, method="class")
prp(cart)
Varimpcompr <- varImp(modFit_C, scale=TRUE)
plot(Varimpcompr, main="Critical variables for the Compressor Decay")
corrM
featname
corrM
high <- findCorrelation( corrM, cutoff =.99)
high
high <- findCorrelation( corrM, cutoff =.98)
high
sort(high)
corr[,13]
corrM[,13]
corrM[13,13]
corrM[13,]
high <- findCorrelation( corrM, cutoff =.985)
sort(high)
high <- findCorrelation( corrM, cutoff =.95)
sort(high)
source('~/data_product.R')
modFit_C
predictions_C <- predict(modFit_C, newdata=testing)
confusionMatrix(predictions_C, testing$V19)
cart <- rpart(V19~., data=training, method="class")
prp(cart)
modFit_T<- train(V20~., method="rpart", data= training)
modFit_T
print(modFit_T$finalModel)
predictions_T <- predict(modFit_T, newdata=testing)
confusionMatrix(predictions_T, testing$V20)
cart <- rpart(V20~., data=training, method="class")
prp(cart)
Varimpturb <- varImp(modFit_T, scale=TRUE)
plot(Varimpturb, main="Critical variables for the Turbine Decay")
source('~/data_product.R')
shiny::runApp('~/coursera/reproducible research')
?sliderInput
shiny::runApp('~/coursera/reproducible research')
shiny::runApp('~/coursera/reproducible research')
shiny::runApp('~/coursera/reproducible research')
shiny::runApp('~/coursera/reproducible research')
?textOutput
shiny::runApp('~/coursera/reproducible research')
shiny::runApp('~/coursera/reproducible research')
?mainPanel
shiny::runApp('~/coursera/reproducible research')
shiny::runApp('~/coursera/reproducible research')
shiny::runApp('~/coursera/reproducible research')
shiny::runApp('~/coursera/reproducible research')
shiny::runApp('~/coursera/reproducible research')
shiny::runApp('~/coursera/reproducible research')
shiny::runApp('~/coursera/reproducible research')
shiny::runApp('~/coursera/reproducible research')
shiny::runApp('~/coursera/reproducible research')
?renderImage
?imageOutput
shiny::runApp('~/coursera/reproducible research')
shiny::runApp('~/coursera/reproducible research')
shiny::runApp('~/coursera/reproducible research')
shiny::runApp('~/coursera/reproducible research')
shiny::runApp('~/coursera/reproducible research')
shiny::runApp('~/coursera/reproducible research')
shiny::runApp('~/coursera/reproducible research')
shiny::runApp('~/coursera/reproducible research')
?imageOutput
shiny::runApp('~/coursera/reproducible research')
shiny::runApp('~/coursera/reproducible research')
shiny::runApp('~/coursera/reproducible research')
shiny::runApp('~/coursera/reproducible research')
Sys.date()
Sys.Date()
Sys.Date() - "2013-02-12"
Sys.Date() - as.date("2013-02-12")
Sys.Date() - as.Date("2013-02-12")
dr<-Sys.Date() - as.Date("2013-02-12")
dr
dr[1]
as.numeric(dr)
shiny::runApp('~/coursera/reproducible research')
shiny::runApp('~/coursera/reproducible research')
shiny::runApp('~/coursera/reproducible research')
?imageOutput
shiny::runApp('~/coursera/reproducible research')
?renderImage
shiny::runApp('~/coursera/reproducible research')
shiny::runApp('~/coursera/reproducible research')
shiny::runApp('~/coursera/reproducible research')
?imageOutput
shiny::runApp('~/coursera/reproducible research')
shiny::runApp('~/coursera/reproducible research')
shiny::runApp('~/coursera/reproducible research')
shiny::runApp('~/coursera/reproducible research')
shiny::runApp('~/coursera/reproducible research')
?renderUI
shiny::runApp('~/coursera/reproducible research')
?uiOutput
shiny::runApp('~/coursera/reproducible research')
is.null(dsfdm)
dsds=NULL
is.null(dsds$dfd)
shiny::runApp('~/coursera/reproducible research')
shiny::runApp('~/coursera/reproducible research')
server
ui
shiny::runApp('~/coursera/reproducible research')
?tags
shiny::runApp('~/coursera/reproducible research')
shiny::runApp('~/coursera/reproducible research')
shiny::runApp('~/coursera/reproducible research')
library(devtools)
install.packages("devtools")
library("devtools")
library(shinyapps)
install.packages("shinyapps")
install_github('slidify', 'dzt109')
library(slidify)
install.packages("slidify")
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
author("deepak_trivedi")
inputDate <- as.Date("2000-05-01")
inputDate
todaysdate <- Sys.Date()
todaysdate
todaysdate-inputDate
publish(title = 'datprod', 'RR_pitch.html', host = 'rpubs')
setwd("C:\\Users\\deeptrivia\\Documents\\coursera\\reproducible research")
publish(title = 'datprod', 'RR_pitch.html', host = 'rpubs')
